"use client";

import { useRef, useEffect } from "react";
import gsap from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import Head from "next/head";
import styles from "./page.module.css";
import { SmoothScroll } from "./smoothscroll";

gsap.registerPlugin(ScrollTrigger);

export default function Portfolio() {
  const elementsRef = useRef([]);
  const progressBar = useRef(null);
  const photoRef = useRef(null);
  const sectionRefs = useRef([]);

  useEffect(() => {
    // Animasyon baÅŸlangÄ±Ã§ durumlarÄ±
    gsap.set([`.${styles.skillCard}`, `.${styles.submitButton}`], {
      opacity: 0,
      y: 50,
    });

    // FotoÄŸraf animasyonu
    gsap.from(photoRef.current, {
      duration: 1.5,
      scale: 0.8,
      opacity: 0,
      rotate: -5,
      ease: "power3.out",
    });

    // Progress bar animasyonu
    gsap.to(progressBar.current, {
      width: "100%",
      ease: "none",
      scrollTrigger: {
        scrub: 0.3,
        start: "top top",
        end: "bottom bottom",
      },
    });

    // Section animasyonlarÄ±
    sectionRefs.current.forEach((section) => {
      ScrollTrigger.create({
        trigger: section,
        start: "top 80%",
        onEnter: () => animateSectionElements(section),
        onEnterBack: () => animateSectionElements(section),
      });
    });

    // Floating animasyon
    gsap.to(`.${styles.floating}`, {
      y: 15,
      duration: 2,
      repeat: -1,
      yoyo: true,
      ease: "power1.inOut",
    });

    // BaÅŸlÄ±k animasyonlarÄ±
    gsap.from(`.${styles.mainTitle}, .${styles.subTitle}`, {
      duration: 1.2,
      y: 100,
      opacity: 0,
      stagger: 0.2,
      ease: "back.out(1.7)",
    });
  }, []);

  const animateSectionElements = (section) => {
    // Yetenekler animasyonu
    if (section.querySelector(`.${styles.skillsGrid}`)) {
      gsap.to(`.${styles.skillCard}`, {
        opacity: 1,
        y: 0,
        duration: 0.8,
        stagger: 0.1,
        ease: "power2.out",
      });
    }

    // Ä°letiÅŸim form animasyonu
    if (section.querySelector(`.${styles.contactForm}`)) {
      gsap.to(`.${styles.submitButton}`, {
        opacity: 1,
        y: 0,
        duration: 0.8,
        delay: 0.4,
        ease: "power2.out",
      });
    }

    // Genel element animasyonlarÄ±
    gsap.to(section.querySelectorAll("h2, h3, p, [data-animate]"), {
      opacity: 1,
      y: 0,
      duration: 0.8,
      stagger: 0.1,
      ease: "power2.out",
    });
  };

  // Section'larÄ± referanslara ekleme
  const addSectionRef = (el) => {
    if (el && !sectionRefs.current.includes(el)) {
      sectionRefs.current.push(el);
    }
  };

  return (
    <>
      <SmoothScroll />
      <Head>
        <title>Alperen Taner - Portfolio</title>
      </Head>

      <div className={styles.progressContainer}>
        <div ref={progressBar} className={styles.progressBar}></div>
      </div>

      <section className={styles.photoSection} ref={photoRef}>
        <div className={styles.photoContainer}>
          <img
            src="/956-1.jpg"
            alt="Alperen Taner"
            className={styles.profilePhoto}
          />
        </div>
        <div className={styles.nameContainer}>
          <h1 className={styles.mainTitle}>ALPEREN TANER</h1>
          <h2 className={styles.subTitle}>Ã–ÄžRENCÄ°</h2>
        </div>
      </section>

      {/* HakkÄ±mda */}
      <section className={styles.section} ref={addSectionRef}>
        <h2 className={styles.sectionTitle}>HakkÄ±mda</h2>
        <div className={styles.aboutGrid}>
          {[1, 2].map((_, i) => (
            <div key={i} className={styles.aboutCard} data-animate>
              <h3>{i === 0 ? "ðŸ‘¨ðŸ’» Temel Bilgiler" : "ðŸš€ Teknik Bilgiler"}</h3>
              {i === 0 ? (
                <>
                  <p>DoÄŸum Tarihi: 2 Nisan 2008</p>
                  <p>Åžehir: Bornova, Ä°zmir</p>
                  <p>EÄŸitim: GÃ¶ztepe MTAL</p>
                  <p>Ä°lgi AlanlarÄ±: Kodlama, 3D Modelleme, Oyun GeliÅŸtirme</p>
                </>
              ) : (
                <>
                  <p>2+ YÄ±llÄ±k Kodlama Deneyimi</p>
                  <p>Full-stack Web GeliÅŸtirme</p>
                  <p>3D Modelleme & Render</p>
                  <p>SQL VeritabanÄ± YÃ¶netimi</p>
                </>
              )}
            </div>
          ))}
        </div>
      </section>

      {/* Yetenekler */}
      <section className={styles.section} ref={addSectionRef}>
        <h2 className={styles.sectionTitle}>Yetenekler</h2>
        <div className={styles.skillsGrid}>
          {[
            "JSX",
            "HTML5",
            "CSS",
            "JavaScript",
            "PHP",
            "SQL",
            "3D Modelleme",
            "Git",
          ].map((skill, i) => (
            <div key={i} className={styles.skillCard} data-animate>
              <div className={styles.skillIcon}>{skill.charAt(0)}</div>
              <h3>{skill}</h3>
            </div>
          ))}
        </div>
      </section>

      {/* Projeler */}
      <section className={styles.section} ref={addSectionRef}>
        <h2 className={styles.sectionTitle}>Projeler</h2>
        <div className={styles.projectsGrid}>
          {[
            {
              title: "E-Ticaret Sitesi",
              desc: "React ve Node.js ile geliÅŸtirilmiÅŸ full-stack proje",
              link: "https://github.com/Deronix/FirstShoppingSite",
              img: "/ShoppingSite.jpg",
            },
            {
              title: "Haber Sitesi",
              desc: "GÃ¼ncel haberleri sunan dinamik web uygulamasÄ±",
              link: "https://github.com/Deronix/FirstNewsProject",
              img: "/HaberProje.jpg",
            },
          ].map((project, i) => (
            <a
              key={i}
              href={project.link}
              target="_blank"
              rel="noopener noreferrer"
              className={styles.projectCard}
              data-animate
            >
              <div className={styles.projectImage}>
                <img src={project.img} alt={project.title} />
              </div>
              <h3>{project.title}</h3>
              <p>{project.desc}</p>
            </a>
          ))}
        </div>
      </section>

      {/* Ä°letiÅŸim */}
      <section className={styles.section} ref={addSectionRef}>
        <h2 className={styles.sectionTitle}>Ä°letiÅŸim</h2>
        <div className={styles.contactGrid}>
          <form className={styles.contactForm}>
            {["Ä°sim", "E-posta", "Mesaj"].map((label, i) => (
              <div key={i} className={styles.formGroup} data-animate>
                <label htmlFor={label.toLowerCase()}>{label}</label>
                {label === "Mesaj" ? (
                  <textarea id={label.toLowerCase()} rows="5" required />
                ) : (
                  <input
                    type={i === 1 ? "email" : "text"}
                    id={label.toLowerCase()}
                    required
                  />
                )}
              </div>
            ))}
            <button type="submit" className={styles.submitButton} data-animate>
              GÃ¶nder
            </button>
          </form>

          <div className={styles.socialLinks}>
            <a
              href="https://github.com/Deronix"
              target="_blank"
              rel="noopener noreferrer"
              className={styles.socialCard}
              data-animate
            >
              <span className={styles.socialIcon}>ðŸ‘¨ðŸ’»</span>
              <h3>GitHub Profilim</h3>
              <p>TÃ¼m projelerimi inceleyin</p>
            </a>
          </div>
        </div>
      </section>
    </>
  );
}
